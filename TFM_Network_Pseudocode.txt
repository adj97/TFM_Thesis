TFM Network Pseudocode

-----------------------------
---------- MAIN.PY ----------

Start

Define - road network and each road's characteristics
       - each junction

Check Errors - Over missing attributes, wrong type, ...
             - In all input : network, junctions, params.txt
             - Print error messages if present and exit

Calculate - global network max speed
          - total network length
          - lists of source and sink roads

Define - spatial resolution dx
       - final time end T
       - CFL constraint
       - Reconstruction \
       - Velocity model | - from params.txt
       - Riemann solver /

Calculate - time resolution dt from CFL

Create - spatial grid points
       - initial road-global density profile

Save - initial profile to final data array

Define functions - Godunov solver
                 - Junctions
                 - Reconstructions
                 - Get start and end road index
                 - Velocity model
                 - Compute intercell flux
                 - Global supply/demand functions

Time loop:
|
| Junction loop:
| |
| | Get road-junction boundary densities 
| |
| | Call junction function to get new boundary supply/demands
| |
| | Store each new boundary
| 
| Define global supply/demand functions for a general road in the network
| 
| Road loop:
| |
| | Set the current density on this road as the initial condition vector
| |
| | Runge-Kutta step loop:
| | |
| | | Fix and define ghost cells
| | |
| | | Compute cell-reconstructed density at interfaces
| | |
| | | Compute numerical flux from reconstructed interface density
| | |
| | | Perform and save the next RK updated solution
| |
| | Save the next time step density profile on this road

Save data

Print program statistics

End

-----------------------------
-----------------------------



-----------------------------
---------- GODUNOV ----------

Get current road length, number of points, supply/demand functions
Initialise density

Cell loop:
|
| Calculate single cell inflow and outflow
|
| Update density with simple upwind scheme

-----------------------------
-----------------------------



-----------------------------
-------- JUNCTION F'N -------

Split junction-boundary densities into supply/demand arrays

Initialise new boundary flows array

Calculate and assign new boundary flows

-----------------------------
-----------------------------